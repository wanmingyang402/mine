package SRTDivider

import chisel3._

class CarrySaveAdder(bitwidth: Int) extends Module {
  val io = IO(new Bundle {
    val x = Input(UInt(bitwidth.W))
    val y = Input(UInt(bitwidth.W))
    val z = Input(UInt(bitwidth.W))
    val sum = Output(UInt(bitwidth.W))
    val carry = Output(UInt((bitwidth).W))
  })

  private val sumSeq = for(i <- 0 until bitwidth) yield { io.x(i) ^ io.y(i) ^ io.z(i) }
  private val carrySeq = for(i <- 0 until bitwidth) yield {
    io.x(i) & io.y(i) | io.x(i) & io.z(i) | io.y(i) & io.z(i)
  }
  io.sum := VecInit(sumSeq).asUInt
  io.carry := VecInit(carrySeq).asUInt
}
